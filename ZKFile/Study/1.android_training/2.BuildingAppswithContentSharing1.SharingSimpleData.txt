SharingSimpleData

knowledge

1.Note: The best way to add a share action item to an ActionBar is to use ShareActionProvider, which became available in API level 14. ShareActionProvider is discussed in the lesson about Adding an Easy Share Action.

2.Send Text Content
Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT, "This is my text to send.");
sendIntent.setType("text/plain");
startActivity(Intent.createChooser(sendIntent, getResources().getText(R.string.send_to)));

Optionally, you can set some standard extras for the intent: EXTRA_EMAIL, EXTRA_CC, EXTRA_BCC, EXTRA_SUBJECT. 
	However, if the receiving application is not designed to use them, nothing will happen. 
	You can use custom extras as well, but there's no effect unless the receiving application understands them. 
	Typically, you'd use custom extras defined by the receiving application itself.

Note: Some e-mail applications, such as Gmail, expect a String[] for extras like EXTRA_EMAIL and EXTRA_CC, use putExtra(String, String[]) to add these to your intent.

3.Send Binary Content
Binary data is shared using the ACTION_SEND action combined with setting the appropriate MIME type and placing the URI to the data in an extra named EXTRA_STREAM. 
This is commonly used to share an image but can be used to share any type of binary content:
Intent shareIntent = new Intent();
shareIntent.setAction(Intent.ACTION_SEND);
Uri uriToImage = Uri.parse("file:///sdcard/icon.jpg");
shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);//uriToImage = Uri.parse("file:///android_asset/icon.jpg");不好使？？？
shareIntent.setType("image/jpeg");
startActivity(Intent.createChooser(shareIntent, getResources().getText(R.string.send_to)));

You can use a MIME type of "*/*", but this will only match activities that are able to handle generic data streams.
The receiving application needs permission to access the data the Uri points to. 
The recommended ways to do this are:
	Store the data in your own ContentProvider, making sure that other apps have the correct permission to access your provider. 
	The preferred mechanism for providing access is to use per-URI permissions which are temporary and only grant access to the receiving application.
	An easy way to create a ContentProvider like this is to use the FileProvider helper class.
	Use the system MediaStore. The MediaStore is primarily aimed at video, audio and image MIME types, however beginning with Android 3.0 (API level 11) it can also store non-media types (see MediaStore.Files for more info). 
	Files can be inserted into the MediaStore using scanFile() after which a content:// style Uri suitable for sharing is passed to the provided onScanCompleted() callback. 
	Note that once added to the system MediaStore the content is accessible to any app on the device.

4.Receiving Simple Data from Other Apps
	Take extra care to check the incoming data, you never know what some other application may send you. 
	For example, the wrong MIME type might be set, or the image being sent might be extremely large. 
	Also, remember to process binary data in a separate thread rather than the main ("UI") thread.

5.Implementing an effective and user friendly share action in your ActionBar is made even easier with the introduction of ActionProvider in Android 4.0 (API Level 14). 
	An ActionProvider, once attached to a menu item in the action bar, handles both the appearance and behavior of that item.
	In the case of ShareActionProvider, you provide a share intent and it does the rest.

	<menu xmlns:android="http://schemas.android.com/apk/res/android">
	<item
            android:id="@+id/menu_item_share"
            android:showAsAction="ifRoom"
            android:title="Share"
            android:actionProviderClass=
                "android.widget.ShareActionProvider" />
	...
	</menu>

	private ShareActionProvider mShareActionProvider;
	...

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate menu resource file.
		getMenuInflater().inflate(R.menu.share_menu, menu);

		// Locate MenuItem with ShareActionProvider
		MenuItem item = menu.findItem(R.id.menu_item_share);

		// Fetch and store ShareActionProvider
		mShareActionProvider = (ShareActionProvider) item.getActionProvider();

		// Return true to display menu
		return true;
	}

	// Call to update the share intent
	private void setShareIntent(Intent shareIntent) {
		if (mShareActionProvider != null) {
		mShareActionProvider.setShareIntent(shareIntent);
		}
	}


question

1. knowledge3中，FileProvider与MediaStore的使用
2. uriToImage = Uri.parse("file:///android_asset/icon.jpg");不好使？？？
	        Uri.parse("android.resource://" + getPackageName() + "/"+ R.drawable.ic_launcher);不好使？？？



interest

1.ShareActionProvider	file:///D:/sdk/docs/reference/android/widget/ShareActionProvider.html
2.FileProvider		file:///D:/sdk/docs/reference/android/support/v4/content/FileProvider.html
3.MediaStore		file:///D:/sdk/docs/reference/android/provider/MediaStore.html
4.Action Bar		file:///D:/sdk/docs/guide/topics/ui/actionbar.html#ActionProvider

