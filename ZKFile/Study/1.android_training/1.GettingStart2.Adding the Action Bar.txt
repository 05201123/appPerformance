1. ActionBar Functions includes:
	(1)A dedicated space for giving your app an identity and indicating the user's location in the app.
	(2)Access to important actions in a predictable way (such as Search).
	(3)Support for navigation and view switching (with tabs or drop-down lists).

2. Support Android 3.0 and Above Only
Beginning with Android 3.0 (API level 11), the action bar is included in all activities that use the Theme.
Holo theme (or one of its descendants), which is the default theme when either the targetSdkVersion or minSdkVersion attribute is set to "11" or greater.
	<manifest ... >
		<uses-sdk android:minSdkVersion="11" ... />
		...
	</manifest>
Note: If you've created a custom theme, be sure it uses one of the Theme.Holo themes as its parent. For details, see Styling the Action Bar.

3.Support Android 2.1 and Above
	<manifest ... >
		<uses-sdk android:minSdkVersion="7"  android:targetSdkVersion="18" />
		...
	</manifest>
ry Setup document and set up the v7 appcompat library (once you've downloaded the library package, follow the instructions for Adding lTo get started, read the Support Libraibraries with resources).
	（1）Update your activity so that it extends ActionBarActivity. For example:
		public class MainActivity extends ActionBarActivity { ... }
	（2）In your manifest file, update either the <application> element or individual <activity> elements to use one of the Theme.AppCompat themes. For example:
		<activity android:theme="@style/Theme.AppCompat.Light" ... >
Note: If you've created a custom theme, be sure it uses one of the Theme.AppCompat themes as its parent. For details, see Styling the Action Bar.

4.Add Up Action
To allow Up navigation with the app icon in the action bar, call setDisplayHomeAsUpEnabled():

@Override
public void onCreate(Bundle savedInstanceState) {
    ...
    getActionBar().setDisplayHomeAsUpEnabled(true);
}
This adds a left-facing caret alongside the app icon and enables it as an action button such that when the user presses it, your activity receives a call to onOptionsItemSelected(). The ID for the action is android.R.id.home.

Navigate Up to Parent Activity
To navigate up when the user presses the app icon, you can use the NavUtils class's static method, navigateUpFromSameTask(). When you call this method, it finishes the current activity and starts (or resumes) the appropriate parent activity. 
If the target parent activity is in the task's back stack, it is brought forward as defined by FLAG_ACTIVITY_CLEAR_TOP.

For example:

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
    // Respond to the action bar's Up/Home button
    case android.R.id.home:
        NavUtils.navigateUpFromSameTask(this);
        return true;
    }
    return super.onOptionsItemSelected(item);
}
However, using navigateUpFromSameTask() is suitable only when your app is the owner of the current task (that is, the user began this task from your app).
If that's not true and your activity was started in a task that belongs to a different app, then navigating Up should create a new task that belongs to your app, which requires that you create a new back stack.

Navigate up with a new back stack

If your activity provides any intent filters that allow other apps to start the activity, you should implement the onOptionsItemSelected() callback such that if the user presses the Up button after entering your activity from another app's task, your app starts a new task with the appropriate back stack before navigating up.

You can do so by first calling shouldUpRecreateTask() to check whether the current activity instance exists in a different app's task. 
If it returns true, then build a new task with TaskStackBuilder. 
Otherwise, you can use the navigateUpFromSameTask() method as shown above.

For example:

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
    // Respond to the action bar's Up/Home button
    case android.R.id.home:
        Intent upIntent = NavUtils.getParentActivityIntent(this);
        if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
            // This activity is NOT part of this app's task, so create a new task
            // when navigating up, with a synthesized back stack.
            TaskStackBuilder.create(this)
                    // Add all of this activity's parents to the back stack
                    .addNextIntentWithParentStack(upIntent)
                    // Navigate up to the closest parent
                    .startActivities();
        } else {
            // This activity is part of this app's task, so simply
            // navigate up to the logical parent activity.
            NavUtils.navigateUpTo(this, upIntent);
        }
        return true;
    }
    return super.onOptionsItemSelected(item);
}
Note: In order for the addNextIntentWithParentStack() method to work, you must declare the logical parent of each activity in your manifest file, using the android:parentActivityName attribute (and corresponding <meta-data> element) as described above.

5.Add an <item> element for each item you want to include in the action bar. For example:

res/menu/main_activity_actions.xml
<menu xmlns:android="http://schemas.android.com/apk/res/android" >
    <!-- Search, should appear as action button -->
    <item android:id="@+id/action_search"
          android:icon="@drawable/ic_action_search"
          android:title="@string/action_search"
          android:showAsAction="ifRoom" />
    <!-- Settings, should always be in the overflow -->
    <item android:id="@+id/action_settings"
          android:title="@string/action_settings"
          android:showAsAction="never" />
</menu>

This declares that the Search action should appear as an action button when room is available in the action bar, but the Settings action should always appear in the overflow.
(By default, all actions appear in the overflow, but it's good practice to explicitly declare your design intentions for each action.)

6.If your app is using the Support Library for compatibility on versions as low as Android 2.1, the showAsAction attribute is not available from the android: namespace. 
Instead this attribute is provided by the Support Library and you must define your own XML namespace and use that namespace as the attribute prefix.
(A custom XML namespace should be based on your app name, but it can be any name you want and is only accessible within the scope of the file in which you declare it.)
For example:

res/menu/main_activity_actions.xml
<menu xmlns:android="http://schemas.android.com/apk/res/android"
      xmlns:yourapp="http://schemas.android.com/apk/res-auto" >
    <!-- Search, should appear as action button -->
    <item android:id="@+id/action_search"
          android:icon="@drawable/ic_action_search"
          android:title="@string/action_search"
          yourapp:showAsAction="ifRoom"  />
    ...
</menu>

7.Add the Actions to the Action Bar
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu items for use in the action bar
    MenuInflater inflater = getMenuInflater();
    inflater.inflate(R.menu.main_activity_actions, menu);//***
    return super.onCreateOptionsMenu(menu);
}

8.Respond to Action Buttons
@Override
public boolean onOptionsItemSelected(MenuItem item) {
    // Handle presses on the action bar items
    switch (item.getItemId()) {
        case R.id.action_search:
            openSearch();
            return true;
        case R.id.action_settings:
            openSettings();
            return true;
        default:
            return super.onOptionsItemSelected(item);
    }
}

9.If you are using the Support Library APIs for the action bar, then you must use (or override) the Theme.AppCompat family of styles (rather than the Theme.Holo family, available in API level 11 and higher).
In doing so, each style property that you declare must be declared twice: once using the platform's style properties (the android: properties) and once using the style properties included in the Support Library (the appcompat.R.attr properties—the context for these properties is actually your app). 
See the examples below for details.

Theme.Holo for a "dark" theme.
Theme.Holo.Light for a "light" theme.
You can also use a dark action bar while the rest of the activity uses the light color scheme by declaring the Theme.Holo.Light.DarkActionBar theme.

Theme.AppCompat for the "dark" theme.
Theme.AppCompat.Light for the "light" theme.
Theme.AppCompat.Light.DarkActionBar for the light theme with a dark action bar.

10.Caution: It's important that you declare an appropriate parent theme from which your custom theme and style inherit their styles. 
Without a parent style, your action bar will be without many style properties unless you explicitly declare them yourself.

11.By default, the action bar appears at the top of your activity window, slightly reducing the amount of space available for the rest of your activity's layout. 
If, during the course of user interaction, you want to hide and show the action bar, you can do so by calling hide() and show() on the ActionBar.
However, this causes your activity to recompute and redraw the layout based on its new size.
To avoid resizing your layout when the action bar hides and shows, you can enable overlay mode for the action bar.
When in overlay mode, your activity layout uses all the space available as if the action bar is not there and the system draws the action bar in front of your layout.
This obscures some of the layout at the top, but now when the action bar hides or appears, the system does not need to resize your layout and the transition is seamless.

Tip: If you want your layout to be partially visible behind the action bar, create a custom style for the action bar with a partially transparent background, such as the one shown in figure 1.
For information about how to define the action bar background, read Styling the Action Bar.

To enable overlay mode for the action bar, you need to create a custom theme that extends an existing action bar theme and set the android:windowActionBarOverlay property to true.

<resources>
    <!-- the theme applied to the application or activity -->
    <style name="CustomActionBarTheme"
           parent="@android:style/Theme.Holo">
        <item name="android:windowActionBarOverlay">true</item>
    </style>
</resources>

<resources>
    <!-- the theme applied to the application or activity -->
    <style name="CustomActionBarTheme"
           parent="@android:style/Theme.AppCompat">
        <item name="android:windowActionBarOverlay">true</item>

        <!-- Support library compatibility -->
        <item name="windowActionBarOverlay">true</item>
    </style>
</resources>
***Also notice that this theme includes two definitions for the windowActionBarOverlay style: one with the android: prefix and one without.
The one with the android: prefix is for versions of Android that include the style in the platform and the one without the prefix is for older versions that read the style from the Support Library.

interest
1.ActionBar	file:///D:/sdk/docs/guide/topics/ui/actionbar.html
2.ActionBar Design	file:///D:/sdk/docs/design/patterns/actionbar.html
3.Styles and Themes	file:///D:/sdk/docs/guide/topics/ui/themes.html
5.TaskStackBuilder	file:///D:/sdk/docs/reference/android/support/v4/app/TaskStackBuilder.html#addNextIntentWithParentStack(android.content.Intent)

Question
1.how use Action Bar impl Tab?
2.how use Action Bar overlay property?