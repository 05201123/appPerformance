Building a Dynamic UI with Fragments

knowledge

1.An Intent can be explicit in order to start a specific component (a specific Activity instance) or implicit in order to start any component that can handle the intended action (such as "capture a photo").

2.Here are a couple other intents and their action and Uri data pairs:
	£¨1£©	Uri number = Uri.parse("tel:5551234");
		Intent callIntent = new Intent(Intent.ACTION_DIAL, number);
	£¨2£©	// Map point based on address
		Uri location = Uri.parse("geo:0,0?q=1600+Amphitheatre+Parkway,+Mountain+View,+California");
		// Or map point based on latitude/longitude
		// Uri location = Uri.parse("geo:37.422219,-122.08364?z=14"); // z param is zoom level
		Intent mapIntent = new Intent(Intent.ACTION_VIEW, location);
	£¨3£©	Uri webpage = Uri.parse("http://www.android.com");
		Intent webIntent = new Intent(Intent.ACTION_VIEW, webpage);
  Here are some more intents that add extra data to specify the desired action:

	Send an email with an attachment:
		Intent emailIntent = new Intent(Intent.ACTION_SEND);
		// The intent does not have a URI, so declare the "text/plain" MIME type
		emailIntent.setType(HTTP.PLAIN_TEXT_TYPE);
		emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[] {"jon@example.com"}); // recipients
		emailIntent.putExtra(Intent.EXTRA_SUBJECT, "Email subject");
		emailIntent.putExtra(Intent.EXTRA_TEXT, "Email message text");
		emailIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("content://path/to/email/attachment"));
		// You can also attach multiple items by passing an ArrayList of Uris
	Create a calendar event:
		Intent calendarIntent = new Intent(Intent.ACTION_INSERT, Events.CONTENT_URI);
		Calendar beginTime = Calendar.getInstance().set(2012, 0, 19, 7, 30);
		Calendar endTime = Calendar.getInstance().set(2012, 0, 19, 10, 30);
		calendarIntent.putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, beginTime.getTimeInMillis());
		calendarIntent.putExtra(CalendarContract.EXTRA_EVENT_END_TIME, endTime.getTimeInMillis());
		calendarIntent.putExtra(Events.TITLE, "Ninja class");
		calendarIntent.putExtra(Events.EVENT_LOCATION, "Secret dojo");
		Note: This intent for a calendar event is supported only with API level 14 and higher.


3.Note: It's important that you define your Intent to be as specific as possible. 
	For example, if you want to display an image using the ACTION_VIEW intent, you should specify a MIME type of image/*. 
	This prevents apps that can "view" other types of data (like a map app) from being triggered by the intent.

4.Verify There is an App to Receive the Intent
	Although the Android platform guarantees that certain intents will resolve to one of the built-in apps (such as the Phone, Email, or Calendar app), you should always include a verification step before invoking an intent.
	Caution: If you invoke an intent and there is no app available on the device that can handle the intent, your app will crash.
	To verify there is an activity available that can respond to the intent, call queryIntentActivities() to get a list of activities capable of handling your Intent.
	If the returned List is not empty, you can safely use the intent. For example:
		PackageManager packageManager = getPackageManager();
		List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
		boolean isIntentSafe = activities.size() > 0;
I		f isIntentSafe is true, then at least one app will respond to the intent. If it is false, then there aren't any apps to handle the intent.
Note: You should perform this check when your activity first starts in case you need to disable the feature that uses the intent before the user attempts to use it. If you know of a specific app that can handle the intent, you can also provide a link for the user to download the app 


5.Show an App Chooser
	Notice that when you start an activity by passing your Intent to startActivity() and there is more than one app that responds to the intent, the user can select which app to use by default . 
	This is nice when performing an action for which the user generally wants to use the same app every time, such as when opening a web page (users likely use just one web browser) or taking a photo (users likely prefer one camera).
	However, if the action to be performed could be handled by multiple apps and the user might prefer a different app each time¡ªsuch as a "share" action, for which users might have several apps through which they might share an item¡ªyou should explicitly show a chooser dialog as shown in figure 2. 
	The chooser dialog forces the user to select which app to use for the action every time (the user cannot select a default app for the action).
		Intent intent = new Intent(Intent.ACTION_SEND);
		...

		// Always use string resources for UI text.
		// This says something like "Share this photo with"
		String title = getResources().getString(R.string.chooser_title);
		// Create and start the chooser
		Intent chooser = Intent.createChooser(intent, title);
		startActivity(chooser);

6.You can use explicit or implicit intents when you call startActivityForResult().
	When starting one of your own activities to receive a result, you should use an explicit intent to ensure that you receive the expected result.

7.here's how to start an activity that allows the user to pick a contact:

	static final int PICK_CONTACT_REQUEST = 1;  // The request code
	...
	private void pickContact() {
	Intent pickContactIntent = new Intent(Intent.ACTION_PICK, Uri.parse("content://contacts"));
	pickContactIntent.setType(Phone.CONTENT_TYPE); // Show user only contacts w/ phone numbers
	startActivityForResult(pickContactIntent, PICK_CONTACT_REQUEST);
	}
Receive the Result
	When the user is done with the subsequent activity and returns, the system calls your activity's onActivityResult() method. 
	This method includes three arguments:
		The request code you passed to startActivityForResult().
		A result code specified by the second activity. 
		This is either RESULT_OK if the operation was successful or RESULT_CANCELED if the user backed out or the operation failed for some reason.
		An Intent that carries the result data.

8. Before Android 2.3 (API level 9), performing a query on the Contacts Provider (like the one shown above) requires that your app declare the READ_CONTACTS permission (see Security and Permissions). 
	However, beginning with Android 2.3, the Contacts/People app grants your app a temporary permission to read from the Contacts Provider when it returns you a result. 
	The temporary permission applies only to the specific contact requested, so you cannot query a contact other than the one specified by the intent's Uri, unless you do declare the READ_CONTACTS permission.

9.When your app is installed on a device, the system identifies your intent filters and adds the information to an internal catalog of intents supported by all installed apps. 
	When an app calls startActivity() or startActivityForResult(), with an implicit intent, the system finds which activity (or activities) can respond to the intent.

10.Note: If you don't need to declare specifics about the data Uri (such as when your activity handles to other kind of "extra" data, instead of a URI), you should specify only the android:mimeType attribute to declare the type of data your activity handles, such as text/plain or image/jpeg.

11.If any two pairs of action and data are mutually exclusive in their behaviors, you should create separate intent filters to specify which actions are acceptable when paired with which data types.
	For example, suppose your activity handles both text and images for both the ACTION_SEND and ACTION_SENDTO intents. 
	In this case, you must define two separate intent filters for the two actions because a ACTION_SENDTO intent must use the data Uri to specify the recipient's address using the send or sendto URI scheme. 
	For example:

	<activity android:name="ShareActivity">
		<!-- filter for sending text; accepts SENDTO action with sms URI schemes -->
		<intent-filter>
		<action android:name="android.intent.action.SENDTO"/>
		<category android:name="android.intent.category.DEFAULT"/>
		<data android:scheme="sms" />
		<data android:scheme="smsto" />
		</intent-filter>
		<!-- filter for sending text or images; accepts SEND action and text or image data -->
		<intent-filter>
		<action android:name="android.intent.action.SEND"/>
		<category android:name="android.intent.category.DEFAULT"/>
		<data android:mimeType="image/*"/>
		<data android:mimeType="text/plain"/>
		</intent-filter>
	</activity>

12.***In order to receive implicit intents, you must include the CATEGORY_DEFAULT category in the intent filter. 
	The methods startActivity() and startActivityForResult() treat all intents as if they contained the CATEGORY_DEFAULT category. 
	If you do not declare it, no implicit intents will resolve to your activity.

13.You must always specify a result code with the result. Generally, it's either RESULT_OK or RESULT_CANCELED. You can then provide additional data with an Intent, as necessary.
	Note: The result is set to RESULT_CANCELED by default. £¿£¿£¿
	So, if the user presses the Back button before completing the action and before you set the result, the original activity receives the "canceled" result.

14.There's no need to check whether your activity was started with startActivity() or startActivityForResult(). 
	Simply call setResult() if the intent that started your activity might expect a result. 
	If the originating activity had called startActivityForResult(), then the system delivers it the result you supply to setResult(); otherwise, the result is ignored.

question

1.Intent.ACTION_VIEW¡¢Intent.ACTION_DIAL...system how deals?
2.Caution: If you invoke an intent and there is no app available on the device that can handle the intent, your app will crash. is really?
3. what happens when user select which app to use by default and when Intent.createChooser()?
4. Apps included with the Android platform offer their own APIs ??
5.intentfilter how matches Action,Data,Category?
6.



interest

1.Sharing Simple Data	file:///D:/sdk/docs/training/sharing/index.html
2.Intent	file:///D:/sdk/docs/reference/android/content/Intent.html#createChooser(android.content.Intent, java.lang.CharSequence)
3.Intents and Intent Filters	file:///D:/sdk/docs/guide/components/intents-filters.html
4.http://android-developers.blogspot.com/2009/11/integrating-application-with-intents.html
5.Sharing Files		file:///D:/sdk/docs/training/secure-file-sharing/index.html


