Vue.js2 Study
knowledge
1.Vue.js 事件处理器
事件监听可以使用 v-on 指令：
    <div id="vueclick" >
        <button v-on:click="counter+=1">增加1</button>
       <p>这个按钮被点击了{{counter}}次</p>
   </div>
	new Vue({
            el:'#vueclick',
            data:{
                counter:0
            }
        })
事件修饰符
Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。
Vue.js通过由点(.)表示的指令后缀来调用修饰符。
.stop
.prevent
.capture
.self
.once
<!-- 阻止单击事件冒泡 -->
<a v-on:click.stop="doThis"></a>
<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>
<!-- 修饰符可以串联  -->
<a v-on:click.stop.prevent="doThat"></a>
<!-- 只有修饰符 -->
<form v-on:submit.prevent></form>
<!-- 添加事件侦听器时使用事件捕获模式 -->
<div v-on:click.capture="doThis">...</div>
<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
<div v-on:click.self="doThat">...</div>

<!-- click 事件至少触发一次，2.1.4版本新增 -->
<a v-on:click.once="doThis"></a>
按键修饰符
Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：
<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->
<input v-on:keyup.13="submit">
记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：
<!-- 同上 -->
<input v-on:keyup.enter="submit">
<!-- 缩写语法 -->
<input @keyup.enter="submit">
全部的按键别名：
.enter
.tab
.delete (捕获 "删除" 和 "退格" 键)
.esc
.space
.up
.down
.left
.right
.ctrl
.alt
.shift
.meta
实例
<p><!-- Alt + C -->
<input @keyup.alt.67="clear">
<!-- Ctrl + Click -->
<div @click.ctrl="doSomething">Do something</div>

2.Vue.js 表单
你可以用 v-model 指令在表单控件元素上创建双向数据绑定。
<div id="vueform">
       消息1：<a>{{message}}</a><br/>
       <input type="text" v-model="message" placeholder="message2"><br/>
       消息2：<a>{{message3}}</a><br/>
       <textarea v-model="message3" placeholder="message4"></textarea>
</div>

其中placeholder对应的是默认值。 v-model对应的是输入框的内容，而且是双向绑定，一改都改。

<div id="vueformcheckbox">
       <p>单个复选框：</p>
       <input type="checkbox" v-model="aaa" id="singlecb">
       <label for="singlecb">{{aaa}}</label>
       <p >多个复选框：</p>
       <input type="checkbox" id="a" v-model="abcd" value="a"> <label for="a">a</label><br/>
       <input type="checkbox" id="b" v-model="abcd" value="b"><label for="b">b</label><br/>
       <input type="checkbox" id="c" v-model="abcd" value="c"><label for="c">c</label><br/>
       <input type="checkbox" id="d" v-model="abcd" value="d"><label for="d">d</label><br/>
       <span>{{abcd}}</span>

   </div>
   new Vue({
            el:'#vueformcheckbox',
            data:{
                aaa:true,
                abcd:[]
            }
        })

当单选是，aaa默认是true或false时，v-model="aaa"绑定的就是状态值，但如果此时aaa:true,改成aaa:[],
v-model="aaa"绑定的就是value值。
多选时，一般用[]，就可以显示多个value值了。
还可label for的用法，点击a就会选中checkbox a。

单选按钮的双向数据绑定：
   <div id="vueformradio">
       <input type="radio" id="aaaa" v-model="c" value="Baidu"><label for="aaaa">Baidu</label><br/>
       <input type="radio" id="bbbb" v-model="c" value="Google"><label for="bbbb">Google</label><br/>
       <span>选中的值为：{{c}}</span>
   </div>
    new Vue({
            el:'#vueformradio',
            data:{
                c:"Google"
            }
        })

v-model绑定的value的值，并且起到了排斥的作用，即属性name一致的作用。

下拉列表的双向数据绑定：
<div id="vueformselect">
        <select v-model="seletedvalue">
            <option value="">选择一个网站</option>
            <option value="www.baidu.com">Baidu</option>
            <option value="www.google.com">Google</option>
        </select>
       <p>选中的网站：{{seletedvalue}} </p>
 </div>
new Vue({
            el:'#vueformselect',
            data:{
                seletedvalue:'',
            }
        })


修饰符
.lazy
在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：
<!-- 在 "change" 而不是 "input" 事件中更新 -->
<input v-model.lazy="msg" >
.number
如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：
<input v-model.number="age" type="number">
这通常很有用，因为在 type="number" 时 HTML 中输入的值也总是会返回字符串类型。
.trim
如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：
<input v-model.trim="msg">


3.Vue.js 组件
组件（Component）是 Vue.js 最强大的功能之一。
组件可以扩展 HTML 元素，封装可重用的代码。
组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树.



question
1.感觉不到修饰符的作用.trim,.number 的作用