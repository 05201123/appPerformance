Android源码设计模式实战与解析
knowledge

1.单一职责原则 -----SingleResponsibilityPrinciple----SRP
	一个类只有一个引起它变化的原因，一个类应该是一组相关性很高的函数、数据的封装。
	更多是靠经验，去断定一个类的职责。

面向对象是什么，很多时候都不甚了解。首先我们有一个需求，然后将需求演化为任务。接着我们肢解每一个小任务，
逐一的完成。感觉上就像将一个过程分成好几段，然后完成，怎么觉得都像是面向过程的？
那什么是面向对象呢？面向过程，面向对象又有什么分别？

其实我也无法很简单的阐述，偶尔在工作中会有福至心灵，感觉到面向对象的真谛，但又积累不住，或经不起自己的几个反问。
或许，我是说或许啊，面向对象，就是以对象的角度来肢解任务，肢解世界的。
简单的说，它们要先将任务了解清楚，然后抽象出恰当的对象。他们解决问题的方式是用通过对象之间的信息传递。
一个对象，经过自己的行为处理一番，将信息传给下一个对象，直到问题解决。

一个大任务，分解成很多小任务，而这些小任务彼此交织牵连，这就很容易将程序做的复杂而难以复用。
对象则不同，它有很大的复用性，对象的行为可以扩充，简单直接。

面向对象，追求的是抽象封装，复用，简单直接，层次分明。所以适当的封装类极为关键。
一个类，只封装一系列相关性高的行为，属性，每个行为都只做一件事，这样，才能更好的被人理解，更清晰。
如果一个类职责越多，改动的可能就越大，不仅类可能会越来越复杂，难以维护，也越容易出错。

2.开放关闭原则-----OpenClosePrinciple-------OCP
  
 对扩展开发，对修改关闭。理想状态下，当我们按照需求写完代码后，这个模块，这个类，这个方法，都基本确定了。
 除非错误，否则不要修改原有的代码。比如在模块级别，想要扩充功能，但原有模版的功能还有用，最好是不修改原有
 代码而实现功能扩充。

 当然，需求的变化不是那么那么理想的，可能现在的需求要抹杀以前的功能，
	我们的抽象也不是那么理想的，我的抽象出的对象，需要扩充，
	我们的代码也是死死的，不容易扩展，不够灵活，总之无法完全遵守OCP原则，但可以尽量的去按照OCP原则去
	追求理想。（当然，如何选择，需要权衡，OCP有些时候是需要不管不顾的，毕竟原则太多，场景太多，我们做的是
	在合适的场景写出灵活的代码）。

OCP还是要抽象了，只有抽象的好，才能容易扩展，才能运用多态，将实现分离出去。只有分离出去，才有选择使用的可能。
只有能选择使用，才能做到扩充功能时，将新的功能实现设置进去，而不用去修改原有的逻辑。
	比如工厂，比如策略。

3.里氏替换原则------LiskovSubstitutionPrinciple------LSP

如果对每一个类型为S的对象O1，都有类型为T的对象O2，使得以T定义的所有程序P在所有的对象O1都替换成对象O2时，程序P的行为没有发生变化，
那么类型S是类型T的子类型。

所有引用基类的地方必须能透明地使用其子类的对象。

利用java语言继承和多态的特性，实现代码的灵活，可扩展。当然很多复杂的情况下，子类无须遵从LSP，而是在特定的情况下抛出异常，因为子类
的特殊性，而继承的侵入性，子类无法满足父类的所有行为。这是一种无奈，也是一种妥协。extends 与 implements 之间的取舍。可以叫做非完美的子类吧。
所以并不是父类的没一个程序都会执行。当然父类的行为中包括异常的处理，那是另说了。



4.OOP的继承的优缺点：
	优点：1.代码重用
	      2.子类与父类基本相似，但又与父类有区别。
	      3.提高代码的可扩展性。
	缺点：1.继承是侵入性的，只要继承就必须拥有父类的所有属性和方法。
	      2.可能造成子类代码冗余，灵活性降低
	        当父类的实现改变时可能要相应的对子类做出改变 
		不能在运行时改变由父类继承来的实现 

	有当下列条件满足时才考虑使用继承： 
	精心设计专门用于被继承的类，继承树的抽象层应该比较稳定，一般不要多于三层。
	对于不是专门用于被继承的类，禁止其被继承。
	优先考虑用组合关系来提高代码的可重用性。 
	子类是一种特殊的类型，而不只是父类的一个角色 
	子类扩展，而不是覆盖或者使父类的功能失效 

5.依赖倒置原则-------DependenceInversionPrinciple------DIP
	使高层次的模块不依赖低层次模块的实现细节。面向接口编程。模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，
	其依赖关系是通过接口或抽象类产生的。
	（1）高层模块不应该依赖底层模块，两者都应该依赖其抽象。
	（2）抽象不应该依赖细节。
	（3）细节应该依赖抽象。
	控制反转是依赖倒置的一种具体实现，强调的是控制流程的依赖倒置，是框架设计的必用模式。
	框架基于依赖倒置模式设计：对于框架中不确定的部分，框架抽象出一组接口，并依赖于这组接口进行实现，应用程序实现这组接口。
	依赖注入也是依赖倒置的一种具体实现，是类库设计的一种常用模式。
	类库中的类基于依赖模式设计：某类依赖于接口，而不是具体的实现，由调用者在调用时传入这些接口的具体实现类。

	弊病：
	依赖倒置的基础是假设抽象是稳定的。
	对于我们已经了解的事物，当然可以实现很好的抽象，但对于尚未认识清楚的事物，比如用户需求，就很难保证这个抽象的稳定性。
	因此一旦这个抽象稳定的假设不成立，那么依赖倒置不但不能发挥优势，反倒可能成为包袱。

6.接口隔离原则-----InterfaceSegregationPrinciple----ISP
	定义：客户端不应该依赖它不需要的接口。
	另一种定义：类间的依赖关系应该建立在最小的接口上。
	接口隔离的目的是系统解开耦合，从而容易重构、更改和重新部署。

	简单的说，就是抽象接口的艺术，要求小而精。接口其实就是公共特征的一组抽象行为，而在一组抽象行为中，行为越少，越容易更改。
	当然不是越少越好，始终遵循的抽象，简单，复用。

7.迪米特原则----Law of Demeter----LOD 或 最少知识原则----LeastKnowledgePrinciple------LKP
	一个对象应该对其他对象有最少的了解。
	简单的说：就是一个类应该对自己需要耦合或调用的类知道的最少。只关心自己需要的，其他的一概不管。关系越密切，耦合度越高，
	越容易出错。

	对象是对事物的抽象，对象有行为和属性，对象之间的信息传递是通过方法来实现的。我们完成需求，就是对象接收到信息（方法传递过来的），通过自身属性和内部方法运算，
	将信息传递给下一个对象。。。一直将信息传递下去，直到解决问题。

在应用开发中，最难的不是完成应用的开发工作，而是在后续升级、维护过程中让应用系统能够拥抱变化。拥抱变化也就意味着在满足需求且不破坏系统稳定性的前提下，保持高可扩展
性、高内聚、低耦合，在经历各版本的变更之后依然保持清晰、灵活、稳定的系统架构。当然这是一种比较理想的情况。但我们必须朝着这个方向努力。
	活的久就是胜利。




	










question

1.Imageview setBitmap() 可以在子线程吗？好使吗？
	
08-16 19:30:33.253 24024-24064/fragment.jh.com.fragment E/AndroidRuntime: FATAL EXCEPTION: Thread-2030
android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.
at android.view.ViewRootImpl.checkThread(ViewRootImpl.java:5399)
at android.view.ViewRootImpl.requestLayout(ViewRootImpl.java:986)
at android.view.View.requestLayout(View.java:15607)
at android.widget.RelativeLayout.requestLayout(RelativeLayout.java:318)
at android.view.View.requestLayout(View.java:15607)
at android.widget.ImageView.setImageDrawable(ImageView.java:421)
at android.widget.ImageView.setImageBitmap(ImageView.java:436)
at fragment.jh.com.fragment.MainActivity$1$1.run(MainActivity.java:24)
at java.lang.Thread.run(Thread.java:838)
