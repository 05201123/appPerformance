第四章 View 的事件体系

1.knowledge
	(1)View的基本概念
		代表了一个控件，所有控件的父类，是一种界面层次的控件抽象。
        (2)View的位置参数（统统是相对父布局的相对坐标）
		Android中，X轴和y轴的正方向分别为右和下。大部分显示系统都是按照这个标准来定义坐标系的。
		View的四个属性：top左上角纵坐标，left左上角横坐标，right是右下角横坐标，
		bottom是右下角纵坐标。
		四个属性，决定了view的位置。
		width=right-left，height=bottom-top
	   Android 3.0开始，View增加了额外的几个参数：
	   x 左上角的横坐标，
	   y 左上角纵坐标
	   translationX 左上角相对于父容器的偏移量，向右移动为正值，向左移动为负值。
	   translationY 左上角相对于父容器的偏移量，向下移动为正值，向上移动为负值。
	   偏移量用的移动后的坐标减去以前的坐标得到。
	   x=left+translationX，y=top+translation。
	   可见，view不移动时，translationX=0，x=left。
	(3)MotionEvent :Action_Down Action_Move Action_Up
	   MotionEvent,系统提供了两组方法，getX、getY getRawX、getRawY。
	   getX返回的是点击点相对于点击view左上角x的坐标。
	   getRawX返回的是相对于手机屏幕左上角x坐标。
	(4)TouchSlop:是系统所能识别出的被认为是滑动的最小距离。这是一个常量，和设备有关。
	ViewConfiguration.get(mContext).getScaledTouchSlop(),
	源码中，在frameworks/base/core/res/res/values/config.xml中，
	<dimen name="config_viewConfigurationTouchSlop">8dp</dimen>
		通常是用在，滑动处理时，过滤一些细微滑动，以提高用户体验。
	(5)VelocityTracker 速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直方向。
		VelocityTracker vt=VelocityTracker.obtain();
		vt.addMovement(event);
		if(event.getAction()==MotionEvent.ACTION_UP){
			vt.computeCurrentVelocity(1000);
			int y= (int) vt.getYVelocity();
			vt.clear();
			vt.recycle();
			Log.e("aaaaaaaaaaaaaaaaaaa","y = "+y);
		}

	  注意回收资源
	  通常用于，手指离开后的惯性滑动处理。
	
	  (6)Gesture Detector 手势监测。
	  用法比较简单，直接接管onTouchEvent，
	  public boolean onTouchEvent(MotionEvent event) {
	  GestureDetector gd=new GestureDetector(this, new GestureDetector.OnGestureListener() {
            @Override
            public boolean onDown(MotionEvent e) {
                return false;
            }

            @Override
            public void onShowPress(MotionEvent e) {

            }

            @Override
            public boolean onSingleTapUp(MotionEvent e) {
                return false;
            }

            @Override
            public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
                return false;
            }

            @Override
            public void onLongPress(MotionEvent e) {

            }

            @Override
            public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
                return false;
            }
        });
		return  gd.onTouchEvent(event);
       }
	通常用的方法是长按，双击，单机，滑动，快速滑动，如果功能并不精确，又不是太简单，都可以GestureDetector
	
	(7)Scoller 弹性滑动对象，用于实现View的弹性滑动。写法很简单，主要关键是用的时候算滑动距离。
public class ScrollStudyView extends FrameLayout {
    private Scroller mScroller;
    public ScrollStudyView(@NonNull Context context){
        super(context);
        initView();
    }



    public ScrollStudyView(@NonNull Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        initView();
    }
    private void initView() {
        mScroller=new Scroller(getContext());
        LayoutInflater.from(getContext()).inflate(R.layout.scroll_study_view,this);
    }
    public void smoothScroll(int distance){
        mScroller.startScroll(0,getScrollY(),0,distance,2000);
//        scrollBy(0,distance);
        invalidate();
    }
    @Override
    public void computeScroll() {
        //判断是否还在滚动，还在滚动为true
        if (mScroller.computeScrollOffset()) {
            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());
            //更新界面
            postInvalidate();
        }
        super.computeScroll();
    }
}

     (8) View 的滑动
		a、srcollTo/scrollBy   srcollTo（x,y），是将view的内容移动，而不是view本身移动，比如viewgroup，是指的其内部的childview移动。而viewgroup本身不动。
			ScrollX的值总是等于View的左边缘与View内容左边缘在水平方向的距离。由于View的左边缘不动，而内容随着Scroll移动，所以，若ScrollX为正值，那么
			View的内容是向左移动，同理ScrollY为负值，就是向上移动。这一点比较特别。srcollTo（x,y），就是移动到ScrollX=x，ScrollY=y的位置。
			比如ScrollTo（10,10）就是向左向上移动。
			比较简单，并且不影响内部元素的单击事件。缺点是只能滑动View的内容，并不能滑动View本身。
		b、Animation
			属性动画移动，用的TransationX,Y来实现，很简单。 用户交互少比较完美，因为动画手动停止动画有点得不偿失。但可以实现一些复杂的效果。
		c、setmargin
 			setMargin，自己手动的控制频率，比如用handler 比较麻烦，但可以处理好用户交互的view
    
    (9)View 的事件分发
		三个方法一个listioner，
		a、boolean dispatchTouchEvent(MotionEvent ev)  
			用来进行事件的分发。如果事件能传递给当前View，那么此方法一定被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，
			表示是否消耗此事件
		b、boolean onInterceptTouchEvent(MotionEvent ev)
			在dispatchTouchEvent中调用，用来判断是否拦截某事件。如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示
			是否拦截当前事件。
		c、boolean onTouchEvent(MotionEvent event)
			在dispatchToucheEvent中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则同一个事件序列中，当前View无法再次接收到事件。
		d、OnTouchListener
 	    
		这个伪代码不错：
		public boolean dispatchTouchEvent(MotionEvent ev){
			boolean consume=false;
			if(onInterceptTouchEvent(ev)){
				consume=onTouchEvent(ev);
			}else{
				consume=child.dispatchTouchEvent(ev);
			}
			reutn consume;
		}
 		
		***当一个View需要处理事件时，如果设置了onTouchListener，那么执行onTouchListener中的onTouch()方法，如果返回是false，则执行当前View的onTouchEvent()，
		如果返回true，那么onTouchEvent将不会被调用。可见，onTouchListener优先级比onTouchEvent()高。在onTouchEvent中，如果设置了onClickListener()，那么
		onClick会被调用。可以看出，平时我们常用的onClickListener，其优先级最低，即事件传递的底端。

		当一个事件产生后，它的传递过程如下顺序：Activity--->Window---->View。顶级的View接收到事件后，就会按事件分发机制去分发事件。
		考虑这么一种情况，如果一个View的onTouchEvent方法返回false，那么它的父容器的onTouchEvent将会被调用，依此类推，如果所有元素都不处理这个事件，那么这个事件
		最终将传递给Activity的onTouchEvent方法来处理。
	
	(10)****一些重要的结论******
		a、同一个时间序列是指手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束。在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含数量不定的move事件，
		最终以up事件结尾。
		b、正常情况下，一个事件序列只能被一个View拦截且消耗。这一条的原因可参考下一条，因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，
		因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。
		c、某个View一旦决定拦截，那么这一个事件序列都只能由它处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，
		就是说一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法直接交给它处理，因此就不用再调动这个View的onInterceptTouchEvent去询问它是否要拦截了。
		d、某一个View一旦开始处理事件，如果它不消耗Action_Down事件（onTouchEvent 返回了false），那么同一事件序列中的其他事件都不会交给它来处理，并且事件将交给父元素
		去处理。即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。
		e、如果VIew不消耗除Action_Down之外的事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续事件，最终这些消失的点击
		事件会交给Activity处理。
		f、ViewGroup默认不拦截任何事件。Android源码中，ViewGroup的onInterceptTouchEvent方法默认是false。
		g、View没有onInterceptTouchEvent（）方法，一旦有点击事件传递给它，那么它必然执行onTouchEvent()。
		h、View的onTouchEvent默认都会消耗事件（返回值为true），除非它是不可点击的（clickable，longClickable都是false），View的longClickable默认是false的，而clickable
		属性分情况，Button的clickable为true，TextView的false。
		i、View的enable属性不影响onTouchEvnet的默认返回值，哪怕一个View是disEnable的，只要clickable和longClickable有一个为true，那么它的onTouchEvent都返回true。
		j、onClick发生的条件是view是可点击的，并且收到了down和up的事件。
		k、事件传递时由外向内的，即事件总是先传递给父元素，然后由父元素分发给子View。通过requestDisallowInterceptTouchEvnet方法，可以在子元素中干预父元素的分发过程。
		但是Action_Down事件除外。
	(11)****自己的体会***********
		a、曾经以为，比如viewpager嵌套listview，手势上下滑动，listview上下滑动，此时滑动过程中，手势变为左右滑动，看代码，决定应该是viewpager切换，其实这是一个错觉，
		一旦listview父view拦截了，子view就的dispatch就执行不了了，这个滑动事件序列中。
		b、ViewGroup事件传递过程中，比如一个framlayout，里面有两个View，一前一后，都撑满布局，如果前面的View不消费事件，第二个View后接收到触摸事件。
		可见ViewGroup事件传递时个遍历过程，直到找到消费的事件，找不到才返回上一次。
		c、理解了其实很容易，不要畏之如虎。
		d、流程是：Activity----------->Activity dispatchTouchEvent开始------------------>ViewGroup不消费-------------->Activity onTouchEvent的事件。
		e、onTouchEvent ActionDown只有一个View会消费返回true，	如果无人消费，最终Activity的onTouchEvent执行，（Move，UP）一直执行。
		   如果某个View ActionDown消费了OnTouchEvent，那么如果没有拦截的move up如果不返回true的话，其他父集的onTouchEvent都不会执行，最终会是Activity的onTouchEvent执行。
		   如果move up返回true的时候，当然是自己消费掉所有。一旦父控件拦截了，才能执行父的onTouchEvent。一旦拦截，就能于View ActionDown被其执行了。
	
	
	（12）源码分析：
		Activity的源码。可以如果无人消费，任何事件都会跳转到onTouchEvent(ev)
		public boolean dispatchTouchEvent(MotionEvent ev) {
			if (ev.getAction() == MotionEvent.ACTION_DOWN) {
				onUserInteraction();//用户交互回调，看见有人为了实现某个需求，拦截dispatchTouchEvent的做法，其实google已经给出了回调onUserInteraction()；
			}
			if (getWindow().superDispatchTouchEvent(ev)) {//会最终到我们的viewgroup
				return true;
			}
			return onTouchEvent(ev);
		}
		ViewGroup的源码。FLAG_DISALLOW_INTERCEPT很重要，false的拦截 true的放行。
		mFirstTouchTarget这个至关重要，理解了它，就等于理解了事件传递。
		ViewGroup dispatchTouchEvent(MotionEvent ev) {
		....

		 // Check for interception.
		final boolean intercepted;
		if (actionMasked == MotionEvent.ACTION_DOWN
                    || mFirstTouchTarget != null) {
			final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;
			if (!disallowIntercept) {
				intercepted = onInterceptTouchEvent(ev);
				ev.setAction(action); // restore action in case it was changed
			} else {
				intercepted = false;
			}
		} else {
			// There are no touch targets and this action is not an initial down
			// so this view group continues to intercept touches.
			intercepted = true;
		}

		}

		理解：ViewGroup在如下两种情况下会判断是否拦截当前事件：事件类型为ActionDown或者mFirstTouchTarget!=null。Action_Down事件好理解，那么mFirstTouchTarget!=null
		是什么有意思？这个后面的代码逻辑可以看出来。当事件由ViewGroup的子元素成功处理时，mFirstTouchTarget会被赋值并指向子元素，换种方式说，当ViewGroup 不拦截事件将事件
		交由子元素处理时，mFirstTouchTarget!=null.反过来，一旦事件由当前ViewGroup拦截时，mFirstTouchTarget==null。那么当Action_Move和Action_Up事件到来时，
		intercepted = true;成立，那么将导致ViewGroup的onInterceptTouchEvent不会再被调用，并且同一序列中的其他时间都会默认交给它处理。
		（当然子view的dispatchTouchEvent都不会执行）。
		 
		 还有一个特殊表示FLAG_DISALLOW_INTERCEPT标记位，这个标记是通过requestDisallowInterceptTouchEvent方法来设置的，一般用于子View中。
		FLAG_DISALLOW_INTERCEPT为true，ViewGroup将无法拦截除了Action_Down以为的其他点击事件。Action_down时必定会拦截的。而且ViewGroup ActionDown时，还会将
		FLAG_DISALLOW_INTERCEPT复位为false。
		可见onInterceptTouchEvent并不是每次都调用，但Action_Down基本都调用

		下面就是关于子View的处理以及mFirstTouchTarget的赋值了
		if (!canceled && !intercepted) {
                if (actionMasked == MotionEvent.ACTION_DOWN
                        || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)
                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {
                    final int actionIndex = ev.getActionIndex(); // always 0 for down
                    final int idBitsToAssign = split ? 1 << ev.getPointerId(actionIndex)
                            : TouchTarget.ALL_POINTER_IDS;

                    // Clean up earlier touch targets for this pointer id in case they
                    // have become out of sync.
                    removePointersFromTouchTargets(idBitsToAssign);

                    final int childrenCount = mChildrenCount;
                    if (newTouchTarget == null && childrenCount != 0) {
                        final float x = ev.getX(actionIndex);
                        final float y = ev.getY(actionIndex);
                        // Find a child that can receive the event.
                        // Scan children from front to back.
                        final View[] children = mChildren;

                        final boolean customOrder = isChildrenDrawingOrderEnabled();
                        for (int i = childrenCount - 1; i >= 0; i--) {
                            final int childIndex = customOrder ?
                                    getChildDrawingOrder(childrenCount, i) : i;
                            final View child = children[childIndex];
                            if (!canViewReceivePointerEvents(child)
                                    || !isTransformedTouchPointInView(x, y, child, null)) {
                                continue;
                            }

                            newTouchTarget = getTouchTarget(child);
                            if (newTouchTarget != null) {
                                // Child is already receiving touch within its bounds.
                                // Give it the new pointer in addition to the ones it is handling.
                                newTouchTarget.pointerIdBits |= idBitsToAssign;
                                break;
                            }

                            resetCancelNextUpFlag(child);
                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {
                                // Child wants to receive touch within its bounds.
                                mLastTouchDownTime = ev.getDownTime();
                                mLastTouchDownIndex = childIndex;
                                mLastTouchDownX = ev.getX();
                                mLastTouchDownY = ev.getY();
                                newTouchTarget = addTouchTarget(child, idBitsToAssign);
                                alreadyDispatchedToNewTouchTarget = true;
                                break;
                            }
                        }
                    }

                    if (newTouchTarget == null && mFirstTouchTarget != null) {
                        // Did not find a child to receive the event.
                        // Assign the pointer to the least recently added target.
                        newTouchTarget = mFirstTouchTarget;
                        while (newTouchTarget.next != null) {
                            newTouchTarget = newTouchTarget.next;
                        }
                        newTouchTarget.pointerIdBits |= idBitsToAssign;
                    }
                }
            }

            // Dispatch to touch targets.
            if (mFirstTouchTarget == null) {
                // No touch targets so treat this as an ordinary view.
                handled = dispatchTransformedTouchEvent(ev, canceled, null,
                        TouchTarget.ALL_POINTER_IDS);
            } else {
                // Dispatch to touch targets, excluding the new touch target if we already
                // dispatched to it.  Cancel touch targets if necessary.
                TouchTarget predecessor = null;
                TouchTarget target = mFirstTouchTarget;
                while (target != null) {
                    final TouchTarget next = target.next;
                    if (alreadyDispatchedToNewTouchTarget && target == newTouchTarget) {
                        handled = true;
                    } else {
                        final boolean cancelChild = resetCancelNextUpFlag(target.child)
                                || intercepted;
                        if (dispatchTransformedTouchEvent(ev, cancelChild,
                                target.child, target.pointerIdBits)) {
                            handled = true;
                        }
                        if (cancelChild) {
                            if (predecessor == null) {
                                mFirstTouchTarget = next;
                            } else {
                                predecessor.next = next;
                            }
                            target.recycle();
                            target = next;
                            continue;
                        }
                    }
                    predecessor = target;
                    target = next;
                }
            }

            // Update list of touch targets for pointer up or cancel, if needed.
            if (canceled
                    || actionMasked == MotionEvent.ACTION_UP
                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {
                resetTouchState();
            } else if (split && actionMasked == MotionEvent.ACTION_POINTER_UP) {
                final int actionIndex = ev.getActionIndex();
                final int idBitsToRemove = 1 << ev.getPointerId(actionIndex);
                removePointersFromTouchTargets(idBitsToRemove);
            }
        }

        if (!handled && mInputEventConsistencyVerifier != null) {
            mInputEventConsistencyVerifier.onUnhandledEvent(ev, 1);
        }
        return handled;

	首先ViewGroup遍历所有子元素，然后判断子元素是否能够接听到点击事件。是否能够接收点击事件主要两点衡量：
	子元素是否在播放动画和点击事件的坐标是否在子元素的区域内。dispatchTransformedTouchEvent就是执行onTouchEvent的。
	还是看源码吧，很不错。


	private TouchTarget addTouchTarget(View child, int pointerIdBits) {
		ouchTarget target = TouchTarget.obtain(child, pointerIdBits);
		target.next = mFirstTouchTarget;
		mFirstTouchTarget = target;
		return target;
	}
	如果子元素ontouchEvnet为true，mFirstTouchTarget就附上值了。

	View的源码分析
	View有一个mOnTouchListener的预先拦截，如果其拦截了，onTouchEvent(event)就不走了
	public boolean dispatchTouchEvent(MotionEvent event) {
		if (mInputEventConsistencyVerifier != null) {
			mInputEventConsistencyVerifier.onTouchEvent(event, 0);
		}

		if (onFilterTouchEventForSecurity(event)) {
			//noinspection SimplifiableIfStatement
			ListenerInfo li = mListenerInfo;
			if (li != null && li.mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED
				&& li.mOnTouchListener.onTouch(this, event)) {
				return true;
			}

			if (onTouchEvent(event)) {
				return true;
			}
		}

		if (mInputEventConsistencyVerifier != null) {
			mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);
		}
		return false;
	}
	源码不贴了，主要是if (((viewFlags & CLICKABLE) == CLICKABLE ||
                (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {
		}
		一旦CLICKABLE和LONG_CLICKABLE有一个设置了，就返回true。否则默认返回false。
	public boolean onTouchEvent(MotionEvent event) {
	
	}
	
		
	
2.question
	（1）Activity runOnUiThread（）与getWindow().getDecorView().post(new Runnable()的区别
	发现：runOnUiThread（）在oncreate（）中调用，不能取到控件的top值，getWindow().getDecorView().post(new Runnable()可以取到
	(2)VelocityTracker  vt.getYVelocity()始终等于0
		http://www.cnblogs.com/flyme2012/p/4095088.html
	(3)Scroller原理
			怎么与view关联起来的？
       （4）为什么一旦Acition Down true，Move ，UP 无论返回什么，都会由该View onTouchEvent执行。Action Down的魔力？？
		
       ViewGroup源码理解，mFirstTouchTarget（解决了，看源码就好）

       （5）ViewGroup setOnTouchListoner无用？有用会执行，
       private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,
            View child, int desiredPointerIdBits) {
        final boolean handled;

        // Canceling motions is a special case.  We don't need to perform any transformations
        // or filtering.  The important part is the action, not the contents.
        final int oldAction = event.getAction();
        if (cancel || oldAction == MotionEvent.ACTION_CANCEL) {
            event.setAction(MotionEvent.ACTION_CANCEL);
            if (child == null) {
                handled = super.dispatchTouchEvent(event);
            } else {
                handled = child.dispatchTouchEvent(event);
            }
            event.setAction(oldAction);
            return handled;
        }
	。。。
	}
	调用super.dispatchTouchEvent(event);就会走View 的dispatchTouchEvent那么onTouchListener。
3.interst

	（1）mFirstTouchTarget超级重要
		
	
	
