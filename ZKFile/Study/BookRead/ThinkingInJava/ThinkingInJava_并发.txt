knowledge
1.顺序编程：程序中的所有事物在任意时刻都只能执行一个步骤。
2.采用并发编程的好处：（1）提高程序执行的速度
				a.多处理器下，完成程序片段。分布多个任务，从而极大的提高吞吐量。
				b.并发是提高运行在单处理器上程序的性能。
				
		      （2）为设计某些类型的程序提供更易用的模型
				a.并发提供一个重要的组织结构上的好处，使程序设计的极大的简化
				比如仿真系统，游戏界面，门，人，窗都有自己单独的任务。
				比如整个UI，上半步UI的显示，需要是一个单独的业务，下半步的UI的显示，是另外一个单独的业务。不阻塞页面，两个业务同时运行。。。
				比如消息机制
				b.通常线程能够创建更松散的耦合设计，否则，你的代码中各个部分都必须显示的关注那些通常可以由线程来处理的任务。
		      （3）二者皆存在
		      （4）不必考虑单核还是多核处理器。资源负载均衡。
		      （5）提升用户体验
3.并发的特性：
	就有可论证的确定性，但是实际上具有不可确定性。
	危险、偶发，只有自信，多疑，亲自动手，才能写出优质的多线程代码。
	了解并发，可以使你意识到明显正确的程序可能会展现出不正确的行为。
	可能，可能，了解可能，排除可能，界限，界限，找到界限，防范界限。

	并发必然会带来复杂，但用户体验，程序设计，资源负载均衡改进相比，就微不足道了。
4.并发问题令人困扰的一个主要原因：使用并发时需要解决问题有多个，而实现并发的方式也有多种，并且在这两者之间没有明显的映射关系，（而且通常都是模糊的界限）
因此，你必须理解所有这些问题和特例，以便有效的使用并发。

5.java的线程机制是抢占式的，这表示调度机制会周期性地中断线程，将上下文切换到另一个线程，从而未每一个线程都提供时间片，使得每一个线程都会分配到数量合理的时间
去驱动它的任务。

6.Thread.yield()：执行完生命周期最重要的部分，建议执行其他重要的任务。这是一种希望，调度顺序还是在线程调度器那里。
	It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. 
	It may also be useful when designing concurrency control constructs such as the ones in the java.util.concurrent.locks package.

 thread.join();阻塞当前线程，直到thread线程执行完或者被中断即thead.isAlive==false时。

 thread.interrupt();中断，会给线程添加一个标识，表示线程已经中断，然而异常捕获时，将清理这个标识，所以在interruptException中，isInterrupted（）为false。

 Thread Daemon ：1.非后台线程跑完，后台线程立刻终断。setDaemon(true),即便是finnally方法也不会走，感觉就像crash一样。
                  2.后台线程中，生成的子线程，默认情况下，仍然是后台线程。

7.SingleThreadExecutor ： 1.任务按顺序执行，先进先出。
			  2.避免共享资源同步。

8.try catch 捕捉的是当前线程的异常。而不能捕获其他线程的异常。
	setUncaughtExceptionHandler(UncaughtExceptionHandler handler)，设置当前线程的未被捕捉的异常的处理情况。
	setDefaultUncaughtExceptionHandler，设置这个应用的的未被捕捉的异常的处理情况。
	当线程异常未被捕捉的情况下，先查看线程是否捕捉（setUncaughtExceptionHandler），如果没有则查看线程组是否捕捉，还没有，
	则查看系统级别是否捕捉setDefaultUncaughtExceptionHandler，如果没有，crash或者抛到控制台。


9.线程组，ThreadGroup，最好把线程组当成是一次不成功的尝试，你只要忽略它就好。

10.递增程序自身也需要多个步骤，并且在递增过程中任务可能被线程机制挂起，也就是说，java中递增运算不是原子性的。

11.锁：
	基本上所有的并发模式在解决线程问题冲突的时候，都采用“序列化访问共享资源”的方案。这意味着在给定的时刻只允许一个任务访问共享资源。通常这是通过加锁
语句来实现的。因为锁语句产生一种互斥效果，这种机制成为互斥量(mutex).
	synchronized
	
	所有的对象都自动含有单一的锁（也称为监视器）？synchronized method 作用用于方法时，锁就是就这个。这个自动的锁是synchronized（this）吗? 相同
	针对每个类也有一个锁，所以synchronized static 方法可以在类的范围内防止对static数据的并发访问。这个锁是synchronized（xxx.class）吗?相同
	二者不是一个锁，相互无影响
	
	在并发中，将域设置成private是十分重要的，否则synchronized关键字将不能防止其他任务去直接访问域，造成冲突。
	
	一个任务可以多次获得对象锁。如果一个方法在同一个对象上调用了第二个方法，后者又调用了同一个对象的另一个方法，就会发生这种情况。JVM负责跟踪对象加锁的次数。
	如果一个对象被解锁（即完全释放锁），其计数为0.在任务第一次给对象加锁的时候，计数为1.每当这个相同的任务在这个对象上获得锁时，计数都会递增。显然，只有
	首先获得锁的任务才能允许继续获取多个锁。每当任务离开一个synchronized方法时，计数递减。当计数为0时，释放锁，就可以给别的任务用了。
	
	
	每个访问临界公共资源的方法都必须被同步，否则它们不会正确的工作。关于“临界公共资源”如何理解？
	
	try｛｝finnally｛｝ lock，unlock。
	Lock的优势：1.灵活，加锁，释放锁控制更强。	
					ReentrantLock lock=new ReentrantLock();
					lock.isLocked() 是否锁了
					lock.tryLock(timeout, unit) 多长时间尝试申请锁，阻塞最多timeout的时间。
					lock.tryLock();尝试申请锁
					lock.lockInterruptibly();如果有锁，则等待，发生Thread.interrupt()，则释放当前线程获取的锁，这是synchoized达不到的效果。
			允许尝试去获取锁，如果锁住了，可以先去执行其他事情，而不是像synchronized那样，一直等待。	
			2.实现专有同步结构很有用，“锁耦合”，比如LinkedBlockingQueue；
			3.加锁和释放锁必须是一一对应的，如果多了一个lock，就锁住了，没有释放，如果多了一个unlock，就报异常。
			4.锁和线程相关的，主线程的锁就得主线程释放，子线程的锁必须子线程释放。同一个线程中，有这个锁了，仍然可以加这个锁，但子线程lock时，就需要等待。
	释放未加锁的lock，lock.unlock();
	一个线程加锁，另一个线程解锁，也同样报异常。
	java.lang.IllegalMonitorStateException
 	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:124)
 	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1236)
 	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:432)
	
12.Brain的同步规则：
	如果你正在写一个变量，它可能接下来被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么必须使用同步，并且读写线程必须用相同监视器锁同步。


13.volatile 的用法：
	1.保持可视性，内存模型中，变量被volatile修饰时，对该变量写操作，那么所有读操作就都可以看到这个修改。（即使多核使用了本地缓存），情况也是如此，volatile变量
	会立即被写入主存中，而读操作就发生在主存中。如果多个任务，同时访问一个域，那么这个域就应该是volatile的，否则，这个域只能通过同步来访问。同步也会刷新到主存中
	去。在非volatile上的原子操作不必刷新到主存中去，因此其他读取该域的任务也不必看到这个新值。
	2.在32位操作系统中，long和double的操作，是两个32位的操作，不是原子操作。当用volatile修饰时，简单的赋值和返回操作将获得原子性。
	3.使用volatile而不是synchronized的唯一安全的情况是类中只有一个可变的域。***第一选择应该是使用synchronized。
	4.volatile会阻止编译器优化。？？？

14.原子类的使用：AtomicInteger...使用场景：1.性能调优？？
					   2.Atomic类的设计是用来构建java.util.concurrent的类，因此只有在特殊情况下才在自己的代码中使用它们。
					   通常依赖锁要更安全一些（synchonized或lock）。

15.注意：synchonized关键字不属于方法特征签名的组成部分，所以可以覆盖方法的时候加上去。重写（Overriding）

16.ThreadLocal：防止任务在共享资源上产生冲突的第二种方式是根除对变量的共享。
		线程本地化存储是一种自动化机制，可以使用相同变量的每个线程都创建不同的存储。
		主要用于“业务”状态与所在线程产生关联。
		ThreadLocal通常都是静态域存储（便于不同任务存取），保证不会出现竞争条件。因为get（），set（）等操作都是等同于在同一个线程中操作。
		当然存储的是对象的时候，依然需要小心多线程的风险。

17.线程的终止： （a）自然执行完run方法，线程处于死亡状态。可以在run方法的重要阶段中，添加标识boolean isCanceled，来结束线程。安全，可控。
		（b）强制终止线程，interrupted线程。存在风险，要处理好后事。

18.线程的四种状态：
		（a）new ：新建状态，当线程被创建时，它只会短暂的处于这种状态。此时它已经分配了必须的系统资源，并执行了初始化。此刻线程已经有资格获取cpu时间了，之后
		调度器将这个线程转变为可运行状态或者阻塞状态。
		（b）runnable :就绪：在这种状态下，只要调度器把时间片分配给线程，线程就可以运行了。也就是说，在任意时刻，线程可以运行也可以不运行。只要调度器能分配
		时间片给线程，他就可以运行，这不同于死亡和阻塞状态。
		（c）Blocked ：阻塞：线程能够运行，但有某个条件阻止它的运行。当线程处于阻塞状态时，调度器将忽略线程，不会分配给线程任何CPU时间。直到线程重新进入就绪
		状态，它带有可能执行操作。
		（d）Dead ：死亡：处于死亡或者终止状态的线程将不再是可调度的，并且再也不会得到cpu时间，它的任务已经结束，或不再是可运行。任务死亡的通常方式是run（）
		方法返回，但是任务的线程还可以中断，这也是死亡的一种方式。

19.线程进入阻塞状态的方式：
		（a）sleep（）方法，线程进入休眠状态。任务在制定时间内不会运行。 
			interrupt(),可以中断
		（b）wait（）方式，使线程挂起，直到线程得到notify（）或者notifyAll()消息，线程才会进入就绪状态。
		（c）任务在等待某个输入或输出完成。
			不能中断，想要中断，可以关闭io资源用来释放锁，此时isInterrupted=true，不会爆出InterruptedException。
		（d）任务试图在某个对象上调用其同步控制方法，但对象锁不可用，因为另一个任务正在用这个锁。
			不能中断。发生异常，可以释放锁。
			lock.lockInterruptibly();

20.interrupt(),当执行thread.interrupt()的时候，中断发生的唯一时刻，是在任务要进入阻塞操作中，或者已经在阻塞操作内部时（IO不可中断，或阻塞的synchoized（）方法0），
		interrupt（），会使isInterrupt（）=true，当发声InterruptedExcepiton或者thread。interrupted()时，isInterrupt（）=false。


		

question
1.单核cpu下，并发多线程会提高执行速度吗？
	仍然会提高速度，当执行等待型任务时，如io处理（存取需要等待磁盘响应），若执行高密度的cpu运算是，多线程在执行速度上并不明显。
2.“为设计某些类型的程序提供更易用的模型”有具体例子吗？
3.Moore定律是什么？
4.并发是提高运行在单处理器上程序的性能。怎么理解？（可以解决问题1了）
	在单处理器上运行并发程序开销确实应该比程序的所有部分都顺序执行开销要大。因为其中增加了所谓上下文切换的代价（从一个任务切换到令一个任务）。表面上看，
	将程序的所有部分当成单个任务运行好像是开销更小一些，并且可以节省上下文切换到的代价。
	使这个问题，变得不同是阻塞。如果程序中的某个任务，因为该程序控制范围之外的某些条件（比如I/O）而导致不能继续执行。那么我们可以说这个任务或线程阻塞了。
	如果没有并发，则整个程序都将停止下来，直至外部条件发生变化。但是如果使用并发来编写程序，那么当一个任务阻塞时，程序中的其他任务仍然可以继续执行。
	因此这个程序可以继续向前执行。

	事实上，从性能的角度来看，如果没有任务会阻塞，那么在单处理器上使用并发就没有任何意义了。
5.协作多线程与抢占式的区别?
	协作：是主动让步，优点是无线程数量限制，上下文切换性能更优

6.单核，多核下，线程，进程调度的关系？

7.java线程调度器: 可以是cpu从一个线程转移到另一个线程

8.Thread.setPriority()与Process.setThreadPriority()区别？

9.后台线程生成的子线程是默认是后台线程，默认情况下子线程的priority也是和生成它的线程相等，派生线程，什么原理？

10.Runnable中，在构造器中启动线程，可能会变得很有问题，因为另一个任务可能会在构造器结束之前开始执行，这意味着该任务能够访问处于不稳定状态的对象。这是优选Executor而不是
显示的创建Thread对象的另外一个原因。？？？？不明白
	指的是在构造方法里，启动线程，如果线程去用这个类的资源的时候，由于这个对象还在new的过程中，所以，线程就会访问不稳定状态的对象。这是一个i额风险。

11.承诺升级理论：继续错误的代价由别人来承担，而承认错误的代价由自己来承担。

12.何时用synchronized，何时用lock？？

13.Thread类包含interrupt（）方法，因此你可以终止被阻塞的任务，这个方法将设置线程的中断状态。如果一个线程已经被阻塞，或者试图执行一个阻塞操作，那么设置这个线程的中断状态
将抛出InterruptedExcepiton。当抛出该异常或者该任务调用Thread.interrupted（）时，中断状态将被复位。正如你将看到的，Thread.interrupted（）提供了离开run（）循环而不抛出异常
的第二种方式。          阻塞的任务??才能interrupt吗？？？无限循环的任务呢？？ 第二种方式只的是什么？



14.如果想推出某个任务，interrupt（）方法无法中断时，该如何退出？
	thread.interrupted（）来减少程序执行的步骤，提高新能。





