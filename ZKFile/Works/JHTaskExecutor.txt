1.必须有可测试的机制，比如打印执行时期线程使用情况，cpu使用情况，任务调度情况的日志，记录task执行时间的日志。
2.必须有单元测试
3.紧急任务处理机制
4.task份额里分为可强行销毁与不可强行销毁的
5.task分类，有优先级机制
6.task分类，可延期，上传，下载，必须的task，UI页面分类。
7.兼容当前的task
8.task调度excepiton统一处理
9.关联task，比如埋点的task，它要正常工作，需要调用很多其他接口。目前，这些前置信息接口，很多是在程序已启动调用的，
可以把这些任务的调用时间，修改到调用之后，这应该是以前思想的问题。埋点的地方改动可能有些工作。
10.时刻注意接口的位置是否必要，对的位置放对的东西，对的时候遇对的人。

11.task任务 取消概念，超时概念
12.task任务调度器是单例的，初始化方法init（）只执行一次，如果再执行，要清空以前所有状态。

13.int CPU_COUNT = Runtime.getRuntime().availableProcessors();
   private static final int CORE_POOL_SIZE = CPU_COUNT + 1;
   private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;
14.volatile ，AtomicBoolean



并发线程太多涉及到电量问题。

无效任务的及时清理
1.任务的取消
2.超时机制添加。指定任务执行时间
3.activity关闭，停止任务。
4.view上在view ondetach上停止任务。
5.对于首位的activity，其task最优先执行。对于下层的activity，其任务暂停（对于正在执行的不管，对于在等待队列的暂停），当界面onresume时，继续。
6.对于一个acivity在添加任务时，查看任务池是否已满，如果已满，停止其他activity上执行的线程。
7.如果线程执行时，超时太久或在等待队列中放的太久，就认定失败。

线程创建的统一调度
1.不允许自定义线程池。
2.全局线程池。单线程，不急的任务放入。当CPU任务不多时执行。该任务不能持有大对象。
3.建立UI线程。

4.建立sharePreference的线程池。（文件操作）
3.将锁变为队列。任务的依赖关系，需要内存维护一个队列，可以挂在某个任务下，也可以有超时时间。